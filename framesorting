#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define FSize 3  
typedef struct packet {
    int SeqNum;
    char Data[FSize + 1];
} Packet;
Packet *readdata, *transdata;
int divide(char *msg) {
    int msglen = strlen(msg);
    int NoOfPacket = (msglen + FSize - 1) / FSize;  
    readdata = (Packet *)malloc(sizeof(Packet) * NoOfPacket);
    if (readdata == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    int i, j;
    for (i = 0; i < NoOfPacket; i++) {
        readdata[i].SeqNum = i + 1;
        for (j = 0; j < FSize && *msg != '\0'; j++, msg++) {
            readdata[i].Data[j] = *msg;
        }
        readdata[i].Data[j] = '\0';
    }
    printf("\nThe Message has been divided as follows:\n");
    printf("Packet No.   Data\n");
    for (i = 0; i < NoOfPacket; i++) {
        printf("    %2d       %s\n", readdata[i].SeqNum, readdata[i].Data);
    }
    return NoOfPacket;
}
void shuffle(int NoOfPacket) {
    int *Status = (int *)calloc(NoOfPacket, sizeof(int));
    if (Status == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    transdata = (Packet *)malloc(sizeof(Packet) * NoOfPacket);
    if (transdata == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }

    srand(time(NULL));
    int i, trans;
    for (i = 0; i < NoOfPacket;) {
        trans = rand() % NoOfPacket;
        if (Status[trans] == 0) {
            transdata[i].SeqNum = readdata[trans].SeqNum;
            strcpy(transdata[i].Data, readdata[trans].Data);
            Status[trans] = 1;
            i++;
        }
    }
    free(Status);
}
void sortFrames(int NoOfPacket) {
    int i, j;
    for (i = 0; i < NoOfPacket - 1; i++) {
        for (j = 0; j < NoOfPacket - i - 1; j++) {
            if (transdata[j].SeqNum > transdata[j + 1].SeqNum) {
                Packet temp = transdata[j];
                transdata[j] = transdata[j + 1];
                transdata[j + 1] = temp;
            }
        }
    }
}

void receive(int NoOfPacket) {
    printf("\nPackets received in the following order:\n");
    for (int i = 0; i < NoOfPacket; i++) {
        printf("%4d", transdata[i].SeqNum);
    }
    sortFrames(NoOfPacket);
    printf("\n\nPackets in order after sorting:\n");
    for (int i = 0; i < NoOfPacket; i++) {
        printf("%4d", transdata[i].SeqNum);
    }
    printf("\n\nMessage received is:\n");
    for (int i = 0; i < NoOfPacket; i++) {
        printf("%s", transdata[i].Data);
    }
    printf("\n");
}
int main() {
    char msg[100];
    printf("Enter the message to be transmitted:\n");
    fgets(msg, sizeof(msg), stdin);
    msg[strcspn(msg, "\n")] = 0;  // Remove newline character if any
    int NoOfPacket = divide(msg);
    shuffle(NoOfPacket);
    receive(NoOfPacket);
    free(readdata);
    free(transdata);
 return 0;
}

