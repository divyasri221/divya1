Aim: To implement a program that takes an example subnet of hosts, represented as a graph, and obtains a broadcast tree using Kruskal's algorithm to find the Minimum Spanning Tree (MST), which ensures efficient communication between hosts with minimal cost.

Description: 
In networking, a broadcast tree is used to transmit data from one source host to all other hosts in a network with minimal redundancy and no loops. The broadcast tree is a subset of the networkâ€™s graph that connects all nodes and ensures that the message from the source node reaches every other node.
In this program, we represent a subnet of hosts as an undirected graph where the nodes are hosts, and the edges represent the connection costs between them. The goal is to compute a broadcast tree, which can be treated as a spanning tree rooted at a chosen source host.
We will use Kruskal's algorithm to compute the Minimum Spanning Tree (MST). The MST is the tree that spans all nodes with the minimum possible connection costs, avoiding cycles and redundant edges. The result is a structure that can be used to efficiently broadcast a message from the source host to all others.
Source Code:
#include <stdio.h>
#define INF 99
int parent[50], edge[50][50], t[50][2], n;
void union_sets(int, int);
int find(int);
void kruskal_broadcast_tree() {
    int i, j, u, v, min, mincost = 0;
    for(i = 0; i < n; i++) parent[i] = -1;
    for(i = 0; i < n; i++) {
        min = INF;
        for(j = 0; j < n; j++) {
            if(edge[i][j] < min && find(i) != find(j)) {
                min = edge[i][j];
                u = i;
                v = j;  }  }
        if(find(u) != find(v)) {
            union_sets(u, v);
            t[i][0] = u;
            t[i][1] = v;
            mincost += min;
            printf("Edge added: %d -> %d with cost %d\n", u, v, min);
        }
    }
    printf("Minimum cost is %d\n", mincost);
}
void union_sets(int u, int v) {
    parent[find(u)] = find(v);
}
int find(int u) {
    while(parent[u] != -1) u = parent[u];
    return u;
}
int main() {
    int i, j;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < n; j++) {
            scanf("%d", &edge[i][j]);
            if(edge[i][j] == 0) edge[i][j] = INF;  
        }
    }
    kruskal_broadcast_tree();
    return 0; }
OUTPUT:
Enter the number of nodes: 4
Enter the adjacency matrix:
 0 1 3 99
  1 0 2 4
  3 2 0 5
  99 4 5 0
Edge added: 0 -> 1 with cost 1
Edge added: 1 -> 2 with cost 2
Edge added: 2 -> 3 with cost 5
Minimum cost is 8
